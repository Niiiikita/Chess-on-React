import { PieceType } from "../typeBoard/types";

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function parsePiece(fenChar: string): PieceType {
  const color = fenChar === fenChar.toUpperCase() ? "white" : "black";

  const pieceMap = {
    p: "pawn",
    r: "rook",
    n: "knight",
    b: "bishop",
    q: "queen",
    k: "king",
  } as const;

  const pieceType = pieceMap[fenChar.toLowerCase() as keyof typeof pieceMap];

  if (!pieceType) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª —Ñ–∏–≥—É—Ä—ã –≤ FEN: ${fenChar}`);
  }

  return {
    type: pieceType, // ‚úÖ –¢–µ–ø–µ—Ä—å —Ç–∏–ø: "pawn" | "rook" | ...
    color,
  };
}

export function fenToBoard(fen: string): PieceType[][] {
  const rows = fen.split(" ")[0].split("/");
  const board: PieceType[][] = [];

  for (let i = 0; i < 8; i++) {
    const row: (PieceType | null)[] = [];
    let col = 0;
    for (const char of rows[i]) {
      if (char >= "1" && char <= "8") {
        const empty = parseInt(char);
        for (let j = 0; j < empty; j++) {
          row[col++] = null;
        }
      } else {
        row[col++] = parsePiece(char);
      }
    }
    // üî• –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    board.push([...row]);
  }

  // üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
  return [...board];
}
